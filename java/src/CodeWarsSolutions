import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CodeWarsSolutions
{


     /**
    * Arranges the input string weights according to the weight calculated
    * by adding the digits of the number (100 = 1 , 99 = 18)
    * In case of values that are the same in weight,  the actual number is used to set priority
    * Does not work for integers that are too big.
    * No idea how the writer expects people to solve it.
    * Tried using BigInteger but idk.
    * 
    * @param strng
    * @return
    */
   public static String orderWeight(String strng)
   {
      

      // We trim any trailing and leading whitespace and remove anything that isnt a number
      ArrayList<String> inputWeights = new ArrayList<>(Arrays.asList((strng.trim()).split("[^0-9]+")));
      if(inputWeights.size() <= 1)
      {
         return strng;
      }
      
      String output = "";
      Collections.sort(inputWeights);
      ArrayList<Integer> sortedOutput = new ArrayList<>();

      // Convert the weights
      for (String s : inputWeights)
      {
         int currentWeight = 0;
         try
         {
         currentWeight = Integer.parseInt(s);
         }
         catch (Exception e) {
            // TODO: handle exception
         }
         int numTotal = 0;

         while (currentWeight > 0)
         {
            // Add the last digit to the total
            numTotal += currentWeight % 10;
            // Remove the last number
            currentWeight = currentWeight / 10;
         }
         sortedOutput.add(numTotal);
      }

      //Sort the output according to the weight
      boolean isSorted = false;
      while (!isSorted)
      {
         isSorted = true;

         // Iterate through each number
         for (int x = 0; x < sortedOutput.size() - 1; x++)
         {
            if (sortedOutput.get(x + 1) != null && sortedOutput.get(x) > sortedOutput.get(x + 1))
            {
               //Swap in the modified value array;
               Integer temp = sortedOutput.get(x + 1);
               sortedOutput.set(x + 1, sortedOutput.get(x));
               sortedOutput.set(x, temp);
               
               //Swap in the original value array
               temp = Integer.parseInt(inputWeights.get(x + 1));
               inputWeights.set(x + 1, inputWeights.get(x));
               inputWeights.set(x, temp.toString());

               isSorted = false;
            }
         }
      }

      // Create the output string
      StringBuilder str = new StringBuilder();
      for (int x = 0 ; x < inputWeights.size(); x++)
      {
         String s  = inputWeights.get(x);
         if (x != 0)
         {
            str.append(" ");
            str.append(s);
         }
         else
         {
            str.append(s);
         }
      }
      return str.toString();
   }

     /**
    * Takes in a sentence then returns the same string but with
    * all five or more letter words reversed.
    * Alpha & Spaces only.
    * 
    * @param sentence
    * @return
    */
   public String spinWords(String sentence) {
      
      StringBuilder strBuilder = new StringBuilder();
      boolean isFirst = true;

      //Iterate through each word in the string
      //Regex accounts for 
      for(String s : sentence.split("[^\\w]+")){
         if(!isFirst)
         {
            strBuilder.append(" ");
         }
         if(s.length() > 5)
         {
            //Reverse any 5 words strings and add to output
            strBuilder.append(new StringBuilder(s).reverse().toString());
         }
         else
         {
           strBuilder.append(s);
         }
         //Makes sure the space is not appended at the start
         isFirst = false;
      }
      
      return strBuilder.toString();
   }

   /**
    * Finds the index in the array where the left side is equal to the right
    * Returns -1 by default
    * 
    * @param arr
    *           Input array of integers
    * @return
    */
   public static int findEvenIndex(int[] arr)
   {
      int totalLeft = arr[0];
      // Total up the right side of the array
      int totalRight = Arrays.stream(arr).sum() - arr[0];

      int index = -1;

      for (int x = 1; x < arr.length; x++)
      {
         totalRight -= arr[x];
         if (totalLeft == totalRight)
         {
            return x;
         }
         totalLeft += arr[x];
      }
      return index;
   }

   /**
    * Returns the input integer in its expanded form
    * EG. 702 returns as "700 + 2"
    * 
    * @param num
    * @return
    */
   public static String expandedForm(int num)
   {
      int multiplier = 1;
      StringBuilder strBuild = new StringBuilder();
      for (int size = String.valueOf(num).length(); size >= 0; size--)
      {
         // Retrieves the last value in the int
         int currentNum = num % 10;
         // Removes the last value in the int
         num = num / 10;
         // Makes sure the + is not appended to the first number
         if (currentNum != 0 && size != 1)
         {
            strBuild.insert(0, " + " + (currentNum * multiplier));
         }
         else if (size == 1)
         {
            strBuild.insert(0, (currentNum * multiplier));
         }
         // Increments the multiplier to add correct amount of zeros
         multiplier *= 10;
      }
      return strBuild.toString();
   }

   /**
    * Counts smiley faces
    * 
    * Rules for a smiling face:
    * -Each smiley face must contain a valid pair of eyes. Eyes can be marked as : or ;
    * -A smiley face can have a nose but it does not have to. Valid characters for a nose are - or ~
    * -Every smiling face must have a smiling mouth that should be marked with either ) or D.
    * No additional characters are allowed except for those mentioned.
    * 
    * @param arr
    * @return number of valid smiley faces
    */
   public static int countSmileys(List<String> arr)
   {
      int smileyCounter = 0;

      // Pattern
      Pattern pattern = Pattern.compile("[\\;|:][-|~]?[)|D]\\Z");
      // Iterate through each smiley face to validate it
      for (String s : arr)
      {
         // Check for validity
         Matcher matcher = pattern.matcher(s);
         if (matcher.matches())
         {
            smileyCounter++;
         }
      }
      return smileyCounter;
   }
}
